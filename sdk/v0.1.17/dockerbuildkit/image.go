// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dockerbuildkit

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Builds a Docker image using Buildkit and pushes it to a registry.
type Image struct {
	pulumi.CustomResourceState

	// The path to the build context to use.
	Context pulumi.StringOutput `pulumi:"context"`
	// The digest of the build context.
	ContextDigest pulumi.StringOutput `pulumi:"contextDigest"`
	// The path to the Dockerfile to use.
	Dockerfile pulumi.StringOutput `pulumi:"dockerfile"`
	// The name of the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// The platforms to build for.
	Platforms pulumi.StringArrayOutput `pulumi:"platforms"`
	// The URL of the registry server hosting the image.
	RegistryServer pulumi.StringOutput `pulumi:"registryServer"`
	// The digest of the image manifest in the registry.
	RepoDigest pulumi.StringOutput `pulumi:"repoDigest"`
	// The name of the target stage to build in the Dockerfile.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Registry == nil {
		return nil, errors.New("invalid value for required argument 'Registry'")
	}
	if isZero(args.Context) {
		args.Context = pulumi.StringPtr(".")
	}
	if isZero(args.Dockerfile) {
		args.Dockerfile = pulumi.StringPtr("Dockerfile")
	}
	if isZero(args.Target) {
		args.Target = pulumi.StringPtr("")
	}
	var resource Image
	err := ctx.RegisterResource("docker-buildkit:index:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("docker-buildkit:index:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
}

type ImageState struct {
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// The build arguments.
	Args []BuildArg `pulumi:"args"`
	// The path to the build context to use.
	Context *string `pulumi:"context"`
	// The path to the Dockerfile to use.
	Dockerfile *string `pulumi:"dockerfile"`
	// The name of the image.
	Name string `pulumi:"name"`
	// The platforms to build for.
	Platforms []string `pulumi:"platforms"`
	// The registry to push the image to.
	Registry Registry `pulumi:"registry"`
	// The name of the target stage to build in the Dockerfile.
	Target *string `pulumi:"target"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// The build arguments.
	Args BuildArgArrayInput
	// The path to the build context to use.
	Context pulumi.StringPtrInput
	// The path to the Dockerfile to use.
	Dockerfile pulumi.StringPtrInput
	// The name of the image.
	Name pulumi.StringInput
	// The platforms to build for.
	Platforms pulumi.StringArrayInput
	// The registry to push the image to.
	Registry RegistryInput
	// The name of the target stage to build in the Dockerfile.
	Target pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterOutputType(ImageOutput{})
}
